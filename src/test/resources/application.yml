server:
  port: 8080

aggregation:
  base-url: http://localhost:${server.port}/
  url: aggregation?shipmentsOrderNumbers={shipmentsOrderNumbers}&trackOrderNumbers={trackOrderNumbers}&pricingCountryCodes={pricingCountryCodes}
  sla: 5000ms
  cache:
    enabled: false
    port: 3000
    host: localhost
    expiration: 30m

  shipment-base-url: ${aggregation.apis-base-url}
  shipment-url: shipment-products?orderNumber={orderNumber}
  shipment-timeout: ${aggregation.apis-timeout}

  track-base-url: ${aggregation.apis-base-url}
  track-url: track-status?orderNumber={orderNumber}
  track-timeout: ${aggregation.apis-timeout}

  pricing-base-url: ${aggregation.apis-base-url}
  pricing-url: pricing?countryCode={pricingCountryCode}
  pricing-timeout: ${aggregation.apis-timeout}


  apis-base-url: http://localhost:${aggregation.apis-port}
  apis-port: 4000
  apis-timeout: 2500ms


#resilience4j.circuitbreaker:
#  instances:
#    aggregation:
##      registerHealthIndicator: true
#      slidingWindowSize: 2
#      failureRateThreshold: 50
##      permittedNumberOfCallsInHalfOpenState: 2
#      minimumNumberOfCalls: 2
#      recordExceptions:
#        - java.lang.RuntimeException


#      slidingWindowSize: 5
#      failureRateThreshold: 20
#      recordExceptions:
#        - java.lang.Exception
#        - java.util.concurrent.TimeoutException


#      permittedNumberOfCallsInHalfOpenState: 1
#      slowCallDurationThreshold: 2500
#      minimumNumberOfCalls: 20
#      waitDurationInOpenState: 50s
#      recordExceptions: java.lang.Exception.class




#      CircuitBreakerConfig.custom()
#      .failureRateThreshold(50)
#      .recordExceptions(
#      WebClientResponseException.class,
#      WebClientResponseException.InternalServerError.class
#      )
#      .slidingWindowSize(5)
#      .waitDurationInOpenState(Duration.ofMillis(1000))
#      .permittedNumberOfCallsInHalfOpenState(2)
#      .transitionOnResult()
#      .build()

